//  Copyright Maarten L. Hekkelman, Radboud University 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <iostream>
#include <sstream>
#include <vector>
#include <stack>
#include <deque>
#include <map>
#include <set>

#include <boost/algorithm/string.hpp>
#include <boost/function.hpp>
#include <boost/bind.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/ptr_container/ptr_vector.hpp>
#include <boost/filesystem/fstream.hpp>
#include <boost/foreach.hpp>
#define foreach BOOST_FOREACH 
#include <boost/format.hpp>

#include "zeep/xml/document.hpp"
#include "zeep/exception.hpp"

#include "zeep/xml/parser.hpp"
#include "zeep/xml/doctype.hpp"
#include "zeep/xml/unicode_support.hpp"

using namespace std;
namespace ba = boost::algorithm;
namespace fs = boost::filesystem;

#ifndef nil
#define nil NULL
#endif

//#if DEBUG
//extern int VERBOSE;
//#endif

namespace zeep { namespace xml {

// --------------------------------------------------------------------

namespace
{

template<typename T>
struct value_saver
{
	T&	m_ref;
	T	m_value;

		value_saver(T& value, const T& new_value) : m_ref(value), m_value(value) { m_ref = new_value; }
		~value_saver() { m_ref = m_value; }
};

}

// parsing XML is somewhat like macro processing,
// we can encounter entities that need to be expanded into replacement text
// and so we declare data_source objects that can be stacked.

class data_source;
typedef boost::shared_ptr<data_source>	data_ptr;

// exception generated by data_source

class source_exception : public zeep::exception
{
  public:
	source_exception(const wstring& msg) : exception(wstring_to_string(msg)), m_wmsg(msg) {}
	~source_exception() throw () {}
	
	wstring		m_wmsg;
};

// A data source can have a base dir which is the directory the data came from.
// This information is needed when a relative uri is found in an external ID.

class data_source : public boost::enable_shared_from_this<data_source>, boost::noncopyable
{
  public:
					data_source(data_ptr next)
						: m_next(next), m_base_dir(fs::current_path()), m_encoding(enc_UTF8) {}

	virtual			~data_source() {}

	// data_source is a virtual base class. Derivatives need to declare the next function.
	virtual wchar_t	get_next_char() = 0;

	// to avoid recursively nested entity values, we have a check:
	virtual bool	is_entity_on_stack(const wstring& name)
					{
						bool result = false;
						if (m_next != nil)
							result = m_next->is_entity_on_stack(name);
						return result;
					}

	void			base_dir(const fs::path& dir)					{ m_base_dir = dir; }
	const fs::path&	base_dir() const								{ return m_base_dir; }

	virtual bool	auto_discard() const							{ return false; }

	data_ptr		next_data_source() const						{ return m_next; }

	encoding_type	encoding() const								{ return m_encoding; }

  protected:
	data_ptr		m_next;			// generates a linked list of data_sources
	fs::path		m_base_dir;
	encoding_type	m_encoding;
};

// --------------------------------------------------------------------
// An istream implementation of data_source.

class istream_data_source : public data_source
{
  public:
					istream_data_source(istream& data, data_ptr next = data_ptr())
						: data_source(next)
						, m_data(data)
						, m_char_buffer(0)
						, m_has_bom(false)
					{
						guess_encoding();
					}

					istream_data_source(auto_ptr<istream> data, data_ptr next = data_ptr())
						: data_source(next)
						, m_data(*data)
						, m_data_ptr(data)
						, m_char_buffer(0)
						, m_has_bom(false)
					{
						guess_encoding();
					}

	bool			has_bom()				{ return m_has_bom; }

  private:

	void			guess_encoding();
	
	void			parse_text_decl();
	
	virtual wchar_t	get_next_char();

	wchar_t			next_utf8_char();
	
	wchar_t			next_utf16le_char();
	
	wchar_t			next_utf16be_char();
	
	wchar_t			next_iso88591_char();

	char			next_byte();

	istream&		m_data;
	auto_ptr<istream>
					m_data_ptr;
	stack<char>		m_byte_buffer;
	wchar_t			m_char_buffer;	// used in detecting \r\n algorithm

	boost::function<wchar_t(void)>
					m_next;
	bool			m_has_bom;
	bool			m_valid_utf8;
};

void istream_data_source::guess_encoding()
{
	// see if there is a BOM
	// if there isn't, we assume the data is UTF-8
	
	char c1 = 0, c2 = 0, c3 = 0;
	
	m_data.read(&c1, 1);

	if (c1 == char(0xfe))
	{
		m_data.read(&c2, 1);
		
		if (c2 == char(0xff))
		{
			m_encoding = enc_UTF16BE;
			m_has_bom = true;
		}
		else
		{
			m_byte_buffer.push(c2);
			m_byte_buffer.push(c1);
		}
	}
	else if (c1 == char(0xff))
	{
		m_data.read(&c2, 1);
		
		if (c2 == char(0xfe))
		{
			m_encoding = enc_UTF16LE;
			m_has_bom = true;
		}
		else
		{
			m_byte_buffer.push(c2);
			m_byte_buffer.push(c1);
		}
	}
	else if (c1 == char(0xef))
	{
		m_data.read(&c2, 1);
		m_data.read(&c3, 1);
		
		if (c2 == char(0xbb) and c3 == char(0xbf))
		{
			m_encoding = enc_UTF8;
			m_has_bom = true;
		}
		else
		{
			m_byte_buffer.push(c3);
			m_byte_buffer.push(c2);
			m_byte_buffer.push(c1);
		}
	}
	else
		m_byte_buffer.push(c1);

	switch (m_encoding)
	{
		case enc_UTF8:		m_next = boost::bind(&istream_data_source::next_utf8_char, this); break;
		case enc_UTF16LE:	m_next = boost::bind(&istream_data_source::next_utf16le_char, this); break;
		case enc_UTF16BE:	m_next = boost::bind(&istream_data_source::next_utf16be_char, this); break;
//		case enc_ISO88591:	m_next = boost::bind(&istream_data_source::next_iso88591_char, this); break;
	}
}

char istream_data_source::next_byte()
{
	char result = 0;
	
	if (m_byte_buffer.empty())
	{
		if (not m_data.eof())
			m_data.read(&result, 1);
	}
	else
	{
		result = m_byte_buffer.top();
		m_byte_buffer.pop();
	}

	return result;
}

wchar_t istream_data_source::next_utf8_char()
{
	unsigned long result = 0;
	unsigned char ch[5];
	
	ch[0] = next_byte();
	
	if ((ch[0] & 0x080) == 0)
		result = ch[0];
	else if ((ch[0] & 0x0E0) == 0x0C0)
	{
		ch[1] = next_byte();
		if ((ch[1] & 0x0c0) != 0x080)
			throw source_exception(L"Invalid utf-8");
		result = static_cast<unsigned long>(((ch[0] & 0x01F) << 6) | (ch[1] & 0x03F));
	}
	else if ((ch[0] & 0x0F0) == 0x0E0)
	{
		ch[1] = next_byte();
		ch[2] = next_byte();
		if ((ch[1] & 0x0c0) != 0x080 or (ch[2] & 0x0c0) != 0x080)
			throw source_exception(L"Invalid utf-8");
		result = static_cast<unsigned long>(((ch[0] & 0x00F) << 12) | ((ch[1] & 0x03F) << 6) | (ch[2] & 0x03F));
	}
	else if ((ch[0] & 0x0F8) == 0x0F0)
	{
		ch[1] = next_byte();
		ch[2] = next_byte();
		ch[3] = next_byte();
		if ((ch[1] & 0x0c0) != 0x080 or (ch[2] & 0x0c0) != 0x080 or (ch[3] & 0x0c0) != 0x080)
			throw source_exception(L"Invalid utf-8");
		result = static_cast<unsigned long>(((ch[0] & 0x007) << 18) | ((ch[1] & 0x03F) << 12) | ((ch[2] & 0x03F) << 6) | (ch[3] & 0x03F));
	}

	if (result > 0x10ffff)
		throw source_exception(L"invalid utf-8 character (out of range)");
	
	if (m_data.eof())
		result = 0;
	
	return static_cast<wchar_t>(result);
}

wchar_t istream_data_source::next_utf16le_char()
{
	unsigned char c1 = next_byte(), c2 = next_byte();
	
	unsigned long result = (static_cast<unsigned long>(c2) << 8) | c1;

	return static_cast<wchar_t>(result);
}

wchar_t istream_data_source::next_utf16be_char()
{
	unsigned char c1 = next_byte(), c2 = next_byte();
	
	unsigned long result = (static_cast<unsigned long>(c1) << 8) | c2;

	return static_cast<wchar_t>(result);
}

wchar_t istream_data_source::next_iso88591_char()
{
	throw source_exception(L"to be implemented");
	return 0;
}

wchar_t istream_data_source::get_next_char()
{
	wchar_t ch = m_char_buffer;

	if (ch == 0)
		ch = m_next();
	else
		m_char_buffer = 0;
	
	if (ch == '\r')
	{
		ch = m_next();
		if (ch != '\n')
			m_char_buffer = ch;
		ch = '\n';
	}
	
	return ch;
}

// --------------------------------------------------------------------

class wstring_data_source : public data_source
{
  public:
						wstring_data_source(const wstring& data, data_ptr next = data_ptr())
							: data_source(next)
							, m_data(data)
							, m_ptr(m_data.begin())
						{
						}

  private:

	virtual wchar_t		get_next_char();

	wstring				m_data;
	wstring::iterator	m_ptr;
};

wchar_t	wstring_data_source::get_next_char()
{
	wchar_t result = 0;

	if (m_ptr != m_data.end())
	{
		result = *m_ptr;
		++m_ptr;
	}

	return result;
}

// --------------------------------------------------------------------

class entity_data_source : public wstring_data_source
{
  public:
					entity_data_source(const wstring& entity_name, const fs::path& entity_path,
							const wstring& text, data_ptr next = data_ptr())
						: wstring_data_source(text, next)
						, m_entity_name(entity_name)
					{
						base_dir(entity_path.branch_path());
					}

	virtual bool	is_entity_on_stack(const wstring& name)
					{
						bool result = m_entity_name == name;
						if (result == false and m_next != nil)
							result = m_next->is_entity_on_stack(name);
						return result;
					}

  protected:
	wstring			m_entity_name;
};

// --------------------------------------------------------------------

class parameter_entity_data_source : public wstring_data_source
{
  public:
					parameter_entity_data_source(const wstring& data, const fs::path& base, data_ptr next = data_ptr())
						: wstring_data_source(wstring(L" ") + data + L" ", next)
					{
						base_dir(base);
					}

	virtual bool	auto_discard() const							{ return true; }
};

// --------------------------------------------------------------------

class valid_nesting_validator
{
  public:
					valid_nesting_validator(data_ptr& source)
						: m_ptr(source), m_pointee(source) {}
	
	void			check()
					{
						if (m_ptr != m_pointee)
							throw invalid_exception("proper nesting validation error");
					}
	
  private:
	data_ptr&		m_ptr;
	data_ptr		m_pointee;
};

// --------------------------------------------------------------------

struct parser_imp
{
					parser_imp(
						istream&	data,
						parser&		parser);
	
					~parser_imp();

	string			wstring_to_string(const wstring& s) const
					{
						return zeep::xml::wstring_to_string(s);
					}

	// Here comes the parser part
	void			parse(bool validate);

	// the productions. Some are inlined below for obvious reasons.	
	// names of the productions try to follow those in the TR http://www.w3.org/TR/xml
	void			prolog();
	void			xml_decl();
	void			text_decl();

	void			s(bool at_least_one = false);
	void			eq();
	void			misc();
	void			element(doctype::validator& valid);
	void			content(doctype::validator& valid, bool check_for_whitespace);

	void			comment();
	void			pi();
	
	void			pereference();
	
	void			doctypedecl();
	data_ptr		external_id();
	boost::tuple<fs::path,wstring>
					read_external_id();
	void			intsubset();
	void			extsubset();
	void			declsep();
	void			conditionalsect();
	void			ignoresectcontents();
	void			markup_decl();
	void			element_decl();
	void			contentspec(doctype::element& element);
	doctype::allowed_ptr
					cp();
	void			attlist_decl();
	void			notation_decl();
	void			entity_decl();
	void			parameter_entity_decl();
	void			general_entity_decl();
	void			entity_value();

	// at several locations we need to parse out entity references from strings:	
	void			parse_parameter_entity_declaration(wstring& s);
	void			parse_general_entity_declaration(wstring& s);

	// same goes for attribute values
	wstring			normalize_attribute_value(const wstring& s)
					{
						data_ptr data(new wstring_data_source(s));
						return normalize_attribute_value(data);
					}
					
	wstring			normalize_attribute_value(data_ptr data);

	// The scanner is next. We recognize the following tokens:
	enum XMLToken
	{
		xml_Undef,
		xml_Eof = 256,

		// these are tokens for the markup
		
		xml_XMLDecl,	// <?xml
		xml_Space,		// Really needed
		xml_Comment,	// <!--
		xml_Name,		// name-start-char (name-char)*
		xml_NMToken,	// (name-char)+
		xml_String,		// (\"[^"]*\") | (\'[^\']*\')		// single or double quoted string
		xml_PI,			// <?
		xml_STag,		// <
		xml_ETag,		// </
		xml_DocType,	// <!DOCTYPE
		xml_Element,	// <!ELEMENT
		xml_AttList,	// <!ATTLIST
		xml_Entity,		// <!ENTITY
		xml_Notation,	// <!NOTATION
		
		xml_IncludeIgnore,	// <![
		
		xml_PEReference,	// %name;
		
		// next are tokens for the content part
		
		xml_Reference,		// &name;
		xml_CDSect,			// CData section <![CDATA[ ... ]]>
		xml_Content,		// anything else up to the next element start
	};

	// for debugging and error reporting we have the following describing routine
	wstring			describe_token(int token);

	wchar_t			get_next_char();
	
	// Recognizing tokens differs if we are expecting markup or content in elements:
	int				get_next_token();
	int				get_next_content();

	// retract is used when we've read a character too much from the input stream
	void			retract();
	
	// match, check if the look-a-head token is really what we expect here.
	// throws if it isn't. Depending on the content flag we call either get_next_token or get_next_content
	// to find the next look-a-head token.
	void			match(int token);

	// utility routine
	float			parse_version();

	// error handling routines
	void			not_well_formed(const wstring& msg) const;
	void			not_well_formed(const boost::wformat& msg) const		{ not_well_formed(msg.str()); }
	void			not_valid(const wstring& msg) const;
	void			not_valid(const boost::wformat& msg) const				{ not_valid(msg.str()); }

	// doctype support
	const doctype::entity&	get_general_entity(const wstring& name) const;
	const doctype::entity&	get_parameter_entity(const wstring& name) const;
	const doctype::element*	get_element(const wstring& name) const;

	// Sometimes we need to reuse our parser/scanner to parse an external entity e.g.
	// We use stack based state objects to store the current state.	
	struct parser_state
	{
						parser_state(parser_imp* imp, data_ptr source)
							: m_impl(imp)
							, m_lookahead(0)
							, m_data_source(source)
							, m_version(1.0f)
							, m_encoding(enc_UTF8)
							, m_external_subset(true)
							, m_external_dtd(false)
						{
							swap_state();
						}
						
						~parser_state()
						{
							swap_state();
						}
		
		void			swap_state()
						{
							swap(m_impl->m_lookahead,		m_lookahead);
							swap(m_impl->m_token, 			m_token);					
							swap(m_impl->m_data_source,		m_data_source);
							swap(m_impl->m_buffer,			m_buffer);
							swap(m_impl->m_version,			m_version);
							swap(m_impl->m_encoding,		m_encoding);
							swap(m_impl->m_external_subset,	m_external_subset);
							swap(m_impl->m_in_external_dtd,	m_external_dtd);
						}
		
		parser_imp*		m_impl;
		int				m_lookahead;
		data_ptr		m_data_source;
		stack<wchar_t>	m_buffer;
		wstring			m_token;
		float			m_version;
		encoding_type	m_encoding;
		bool			m_external_subset;
		bool			m_external_dtd;
	};

	// And during parsing we keep track of the namespaces we encounter.
	struct ns_state
	{
					ns_state(parser_imp* imp)
						: m_parser_imp(imp)
						, m_next(imp->m_ns)
					{
						m_parser_imp->m_ns = this;
					}

					~ns_state()
					{
						m_parser_imp->m_ns = m_next;
					}

		parser_imp*	m_parser_imp;
		wstring		m_default_ns;
		ns_state*	m_next;
		
		map<wstring,wstring>
					m_known;

		wstring		default_ns()
					{
						wstring result = m_default_ns;
						if (result.empty() and m_next != nil)
							result = m_next->default_ns();
						return result;
					}

		wstring		ns_for_prefix(const wstring& prefix)
					{
						wstring result;
						
						if (m_known.find(prefix) != m_known.end())
							result = m_known[prefix];
						else if (m_next != nil)
							result = m_next->ns_for_prefix(prefix);
						
						return result;
					}
	};
	
	bool					m_validating;
	bool					m_has_dtd;
	int						m_lookahead;
	data_ptr				m_data_source;
	stack<wchar_t>			m_buffer;
	wstring					m_token;
	float					m_version;
	encoding_type			m_encoding;
	bool					m_standalone;
	parser&					m_parser;
	ns_state*				m_ns;
	bool					m_in_doctype;			// used to keep track where we are (parameter entities are only recognized inside a doctype section)
	bool					m_external_subset;
	bool					m_in_element;
	bool					m_in_content;
	bool					m_in_external_dtd;
	bool					m_allow_parameter_entity_references;

	wstring					m_root_element;
	doctype::entity_list	m_parameter_entities;
	doctype::entity_list	m_general_entities;
	doctype::element_list	m_doctype;

	set<wstring>			m_notations;
	set<wstring>			m_ids;					// attributes of type ID should be unique
	set<wstring>			m_unresolved_ids;		// keep track of IDREFS that were not found yet
};

// --------------------------------------------------------------------
// some inlines

inline
void parser_imp::s(bool at_least_one)
{
	if (at_least_one)
		match(xml_Space);
	
	while (m_lookahead == xml_Space)
		match(xml_Space);
}

inline
void parser_imp::eq()
{
	s();
	match('=');
	s();
}

// --------------------------------------------------------------------

parser_imp::parser_imp(
	istream&		data,
	parser&			parser)
	: m_validating(true)
	, m_has_dtd(false)
	, m_lookahead(xml_Eof)
	, m_data_source(new istream_data_source(data, data_ptr()))
	, m_version(1.0f)
	, m_standalone(false)
	, m_parser(parser)
	, m_ns(nil)
	, m_in_doctype(false)
	, m_external_subset(false)
	, m_in_element(false)
	, m_in_content(false)
	, m_in_external_dtd(false)
	, m_allow_parameter_entity_references(false)
{
	m_encoding = m_data_source->encoding();
	
	// these entities are always recognized:
	m_general_entities.push_back(new doctype::general_entity(L"lt", L"&#60;"));
	m_general_entities.push_back(new doctype::general_entity(L"gt", L"&#62;"));
	m_general_entities.push_back(new doctype::general_entity(L"amp", L"&#38;"));
	m_general_entities.push_back(new doctype::general_entity(L"apos", L"&#39;"));
	m_general_entities.push_back(new doctype::general_entity(L"quot", L"&#34;"));
}

parser_imp::~parser_imp()
{
}

const doctype::entity& parser_imp::get_general_entity(const wstring& name) const
{
	doctype::entity_list::const_iterator e = find_if(m_general_entities.begin(), m_general_entities.end(),
		boost::bind(&doctype::entity::name, _1) == name);
	
	if (e == m_general_entities.end())
		not_well_formed(boost::wformat(L"undefined entity reference '%1%'") % name);
	
	return *e;
}

const doctype::entity& parser_imp::get_parameter_entity(const wstring& name) const
{
	doctype::entity_list::const_iterator e = find_if(m_parameter_entities.begin(), m_parameter_entities.end(),
		boost::bind(&doctype::entity::name, _1) == name);
	
	if (e == m_parameter_entities.end())
	{
		boost::wformat msg(L"Undefined parameter entity '%1%'");
		
		if (m_standalone)
			not_well_formed(msg % m_token);
		else
			not_valid(msg % m_token);
		
		throw zeep::exception(wstring_to_string(msg.str()));
	}
	
	return *e;
}

const doctype::element* parser_imp::get_element(const wstring& name) const
{
	const doctype::element* result = nil;
	
	doctype::element_list::const_iterator e = find_if(m_doctype.begin(), m_doctype.end(),
		boost::bind(&doctype::element::name, _1) == name);

	if (e != m_doctype.end())
		result = &(*e);
	
	return result;
}

wchar_t parser_imp::get_next_char()
{
	wchar_t result = 0;

	if (not m_buffer.empty())
	{
		result = m_buffer.top();
		m_buffer.pop();
	}

	while (result == 0 and m_data_source != nil)
	{
		try
		{
			result = m_data_source->get_next_char();
		}
		catch (source_exception& e)
		{
			not_well_formed(e.m_wmsg);
		}
		
		if (result == 0)
		{
			if (m_data_source->auto_discard())
				m_data_source = m_data_source->next_data_source();
			else
				break;
		}
	}
	
	if (result == 0x0ffff or result == 0x0fffe)
		not_well_formed(boost::wformat(L"character 0x%x is not allowed") % int(result));

	// surrogate support
	if (result >= 0x0D800 and result <= 0x0DBFF)
	{
		wchar_t uc2 = get_next_char();
		if (uc2 >= 0x0DC00 and uc2 <= 0x0DFFF)
			result = (result - 0x0D800) * 0x400 + (uc2 - 0x0DC00) + 0x010000;
		else
			not_well_formed(L"leading surrogate character without trailing surrogate character");
	}
	else if (result >= 0x0DC00 and result <= 0x0DFFF)
		not_well_formed(L"trailing surrogate character without a leading surrogate");
	
	m_token += result;
	
	return result;
}

void parser_imp::retract()
{
	assert(not m_token.empty());
	
	wstring::iterator last_char = m_token.end() - 1;
	
	m_buffer.push(*last_char);
	m_token.erase(last_char);
}

void parser_imp::match(int token)
{
	if (m_lookahead != token)
	{
		wstring expected = describe_token(token);
		wstring found = describe_token(m_lookahead);
	
		not_well_formed(boost::wformat(L"Error parsing XML, expected '%1%' but found '%2%' ('%3%')")
			% expected % found % m_token);
	}
	
	if (m_in_content)
		m_lookahead = get_next_content();
	else
	{
		m_lookahead = get_next_token();
		
		if (m_lookahead == xml_PEReference and m_allow_parameter_entity_references)
			pereference();
	}
}

void parser_imp::not_well_formed(const wstring& msg) const
{
	stringstream s;
	s << "Document not well-formed: " << wstring_to_string(msg);
	throw not_wf_exception(s.str());
}

void parser_imp::not_valid(const wstring& msg) const
{
	if (m_validating)
	{
		stringstream s;
		s << "Document invalid: " << wstring_to_string(msg);
		throw invalid_exception(s.str());
	}
	else
		m_parser.report_invalidation(msg);
}

/*
	get_next_token is a hand optimised scanner for tokens in the input stream.
*/

int parser_imp::get_next_token()
{
	enum State {
		state_Start				= 0,
		state_WhiteSpace		= 10,
		state_Tag				= 20,
		state_String			= 30,
		state_PERef				= 40,
		state_Name				= 50,
		state_CommentOrDoctype	= 60,
		state_Comment			= 70,
		state_DocTypeDecl		= 80,
		state_PI				= 90,
	};

	int token = xml_Undef;
	wchar_t quote_char = 0;
	int state = state_Start;

	m_token.clear();
	
	while (token == xml_Undef)
	{
		wchar_t uc = get_next_char();
		
		switch (state)
		{
			// start scanning. 
			case state_Start:
				if (uc == 0)
					token = xml_Eof;
				else if (uc == ' ' or uc == '\t' or uc == '\n')
					state = state_WhiteSpace;
				else if (uc == '<')
					state = state_Tag;
				else if (uc == '\'' or uc == '\"')
				{
					state = state_String;
					quote_char = uc;
				}
				else if (uc == '%')
					state = state_PERef;
				else if (is_name_char(uc))
					state = state_Name;
				else
					token = uc;
				break;
			
			// collect all whitespace
			case state_WhiteSpace:
				if (uc != ' ' and uc != '\t' and uc != '\n')
				{
					retract();
					token = xml_Space;
				}
				break;
			
			// We scanned a < character, decide what to do next.
			case state_Tag:
				if (uc == '!')				// comment or doctype thing
					state = state_CommentOrDoctype;
				else if (uc == '/')			// end tag
					token = xml_ETag;
				else if (uc == '?')			// processing instruction
					state = state_PI;
				else						// anything else
				{
					retract();
					token = xml_STag;
				}
				break;
			
			// So we had <! which can only be followed validly by '-', '[' or a character at the current location
			case state_CommentOrDoctype:
				if (uc == '-')
					state = state_Comment;
				else if (uc == '[' and m_external_subset)
					token = xml_IncludeIgnore;
				else if (is_name_start_char(uc))
					state = state_DocTypeDecl;
				else
					not_well_formed(L"Unexpected character");
				break;
			
			// Comment, strictly check for <!-- -->
			case state_Comment:
				if (uc == '-')
					token = xml_Comment;
				else
					not_well_formed(L"Invalid formatted comment");
				break;
			
			// scan for processing instructions
			case state_PI:
				if (not is_name_char(uc))
				{
					retract();

					// we treat the xml processing instruction separately.
					if (m_token.substr(2) == L"xml")
						token = xml_XMLDecl;
					else if (ba::to_lower_copy(m_token.substr(2)) == L"xml")
						not_well_formed(L"<?XML is neither an XML declaration nor a legal processing instruction target");
					else
						token = xml_PI;
				}
				break;
			
			// One of the DOCTYPE tags. We scanned <!(char), continue until non-char
			case state_DocTypeDecl:
				if (not is_name_char(uc))
				{
					retract();
					
					if (m_token == L"<!DOCTYPE")
						token = xml_DocType;
					else if (m_token == L"<!ELEMENT")
						token = xml_Element;
					else if (m_token == L"<!ATTLIST")
						token = xml_AttList;
					else if (m_token == L"<!ENTITY")
						token = xml_Entity;
					else if (m_token == L"<!NOTATION")
						token = xml_Notation;
					else
						not_well_formed(boost::wformat(L"invalid doctype declaration '%1%'") % m_token);
				}
				break;

			// strings
			case state_String:
				if (uc == quote_char)
				{
					token = xml_String;
					m_token = m_token.substr(1, m_token.length() - 2);
				}
				else if (uc == 0)
					not_well_formed(L"unexpected end of file, runaway string");
				break;

			// Names
			case state_Name:
				if (not is_name_char(uc))
				{
					retract();
	
					if (is_name_start_char(m_token[0]))
						token = xml_Name;
					else
						token = xml_NMToken;
				}
				break;
			
			// parameter entity references
			case state_PERef:
				if (is_name_start_char(uc))
					state += 1;
				else
				{
					retract();
					token = '%';
				}
				break;
			
			case state_PERef + 1:
				if (uc == ';')
				{
					m_token = m_token.substr(1, m_token.length() - 2);
					token = xml_PEReference;
				}
				else if (not is_name_char(uc))
					not_well_formed(L"invalid parameter entity reference");
				break;
			
			default:
				assert(false);
				not_well_formed(L"state should never be reached");
		}
	}
	
//#if DEBUG
//	if (VERBOSE)
//		cout << "token: " << wstring_to_string(describe_token(token)) << " (" << wstring_to_string(m_token) << ')' << endl;
//#endif
	
	return token;
}

int parser_imp::get_next_content()
{
	enum State
	{
		state_Start			= 10,
		state_Tag			= 20,
		state_Reference		= 30,
		state_WhiteSpace	= 40,
		state_Content		= 50,
		state_PI			= 60,
		state_CommentOrCDATA
							= 70,
		state_Comment		= 80,
		state_CDATA			= 90,
		state_Illegal		= 100
	};

	int token = xml_Undef;
	int state = state_Start;
	wchar_t charref = 0;
	
	m_token.clear();

	while (token == xml_Undef)
	{
		wchar_t uc = get_next_char();
		
		if (uc != 0 and not is_char(uc))
			not_well_formed(boost::wformat(L"illegal character in content: '0x%x'") % int(uc));
		
		switch (state)
		{
			case state_Start:
				if (uc == 0)
					token = xml_Eof;			// end of file reached
				else if (uc == '<')
					state = state_Tag;			// beginning of a tag
				else if (uc == '&')
					state = state_Reference;	// a &reference;
				else if (uc == ']')
					state = state_Illegal;		// avoid ]]> in text
				else if (is_char(uc))
					state = state_Content;		// anything else
				break;
			
			// content. Only stop collecting character when uc is special
			case state_Content:
				if (uc == ']')
					state = state_Illegal;
				else if (uc == 0 or uc == '<' or uc == '&')
				{
					retract();
					token = xml_Content;
				}
				else if (not is_char(uc))
					not_well_formed(L"Illegal character in content text");
				break;
			
			// beginning of a tag?
			case state_Tag:
				if (uc == '/')
					token = xml_ETag;
				else if (uc == '?')			// processing instruction
					state = state_PI;
				else if (uc == '!')			// comment or CDATA
					state = state_CommentOrCDATA;
				else
				{
					retract();
					token = xml_STag;
				}
				break;
			
			// processing instructions
			case state_PI:
				if (not is_name_char(uc))
				{
					retract();
					token = xml_PI;
				}
				break;
			
			// comment or CDATA			
			case state_CommentOrCDATA:
				if (uc == '-')				// comment
					state = state_Comment;
				else if (uc == '[')
					state = state_CDATA;	// CDATA
				else
					not_well_formed(L"invalid content");
				break;

			case state_Comment:
				if (uc == '-')
					token = xml_Comment;
				else
					not_well_formed(L"invalid content");
				break;

			// CDATA (we parsed <![ up to this location
			case state_CDATA:
				if (is_name_start_char(uc))
					state += 1;
				else
					not_well_formed(L"invalid content");
				break;
			
			case state_CDATA + 1:
				if (uc == '[' and m_token == L"<![CDATA[")
					state += 1;
				else if (not is_name_char(uc))
					not_well_formed(L"invalid content");
				break;

			case state_CDATA + 2:
				if (uc == ']')
					state += 1;
				else if (uc == 0)
					not_well_formed(L"runaway cdata section");
				break;
			
			case state_CDATA + 3:
				if (uc == ']')
					state += 1;
				else if (uc == 0)
					not_well_formed(L"runaway cdata section");
				else if (uc != ']')
					state = state_CDATA + 2;
				break;

			case state_CDATA + 4:
				if (uc == '>')
				{
					token = xml_CDSect;
					m_token = m_token.substr(9, m_token.length() - 12);
				}
				else if (uc == 0)
					not_well_formed(L"runaway cdata section");
				else if (uc != ']')
					state = state_CDATA + 2;
				break;

			// reference, either a character reference or a general entity reference
			case state_Reference:
				if (uc == '#')
					state = state_Reference + 2;
				else if (is_name_start_char(uc))
					state = state_Reference + 1;
				else
					not_well_formed(L"stray ampersand found in content");
				break;
			
			case state_Reference + 1:
				if (not is_name_char(uc))
				{
					if (uc != ';')
						not_well_formed(L"invalid entity found in content, missing semicolon?");
					token = xml_Reference;
					m_token = m_token.substr(1, m_token.length() - 2);
				}
				break;
			
			case state_Reference + 2:
				if (uc == 'x')
					state = state_Reference + 4;
				else if (uc >= '0' and uc <= '9')
				{
					charref = uc - '0';
					state += 1;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_Reference + 3:
				if (uc >= '0' and uc <= '9')
					charref = charref * 10 + (uc - '0');
				else if (uc == ';')
				{
					if (not is_char(charref))
						not_well_formed(L"Illegal character in content text");
					m_token = charref;
					token = xml_Content;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_Reference + 4:
				if (uc >= 'a' and uc <= 'f')
				{
					charref = uc - 'a' + 10;
					state += 1;
				}
				else if (uc >= 'A' and uc <= 'F')
				{
					charref = uc - 'A' + 10;
					state += 1;
				}
				else if (uc >= '0' and uc <= '9')
				{
					charref = uc - '0';
					state += 1;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_Reference + 5:
				if (uc >= 'a' and uc <= 'f')
					charref = (charref << 4) + (uc - 'a' + 10);
				else if (uc >= 'A' and uc <= 'F')
					charref = (charref << 4) + (uc - 'A' + 10);
				else if (uc >= '0' and uc <= '9')
					charref = (charref << 4) + (uc - '0');
				else if (uc == ';')
				{
					if (not is_char(charref))
						not_well_formed(L"Illegal character in content text");
					m_token = charref;
					token = xml_Content;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			// ]]> is illegal
			case state_Illegal:
				if (uc == ']')
					state += 1;
				else
				{
					retract();
					state = state_Content;
				}
				break;
					
			case state_Illegal + 1:
				if (uc == '>')
					not_well_formed(L"the sequence ']]>' is illegal in content text");
				else if (uc != ']')
				{
					retract();
					retract();
					state = state_Content;
				}
				break;

			default:
				assert(false);
				not_well_formed(L"state reached that should not be reachable");
		}
	}

//#if DEBUG
//	if (VERBOSE)
//		cout << "content: " << wstring_to_string(describe_token(token)) << " (" << wstring_to_string(m_token) << ')' << endl;
//#endif

	return token;
}

wstring parser_imp::describe_token(int token)
{
	wstring result;
	
	if (token > xml_Undef and token < xml_Eof)
	{
		wstringstream s;
		
		if (isprint(token))
			s << '\'' << wchar_t(token) << '\'';
		else
			s << L"&#x" << hex << token << ';';
		
		result = s.str();
	}
	else
	{
		switch (XMLToken(token))
		{
			case xml_Undef:			result = L"undefined"; 					break;
			case xml_Eof:			result = L"end of file"; 				break;
			case xml_XMLDecl:		result = L"'<?xml'";	 				break;
			case xml_Space:			result = L"space character";			break;
			case xml_Comment:		result = L"comment";	 				break;
			case xml_Name:			result = L"identifier or name";			break;
			case xml_NMToken:		result = L"nmtoken";					break;
			case xml_String:		result = L"quoted string";				break;
			case xml_PI:			result = L"processing instruction";		break;
			case xml_STag:			result = L"tag";			 			break;
			case xml_ETag:			result = L"end tag";					break;
			case xml_DocType:		result = L"<!DOCTYPE"; 					break;
			case xml_Element:		result = L"<!ELEMENT"; 					break;
			case xml_AttList:		result = L"<!ATTLIST"; 					break;
			case xml_Entity:		result = L"<!ENTITY"; 					break;
			case xml_Notation:		result = L"<!NOTATION"; 				break;
			case xml_PEReference:	result = L"parameter entity reference";	break;
			case xml_Reference:		result = L"entity reference"; 			break;
			case xml_CDSect:		result = L"CDATA section";	 			break;
			case xml_Content:		result = L"content";			 		break;
			
			case xml_IncludeIgnore:	result = L"<![ (as in <![INCLUDE[ )";	break;
		}
	}
	
	return result;
}

float parser_imp::parse_version()
{
	float result = -1;
	
	if (m_token.length() >= 3)
	{
		wstring::const_iterator i = m_token.begin();
		if (*i == '1' and *(i + 1) == '.')
		{
			result = 1.0f;
			float dec = 10;
			
			for (i += 2; i != m_token.end(); ++i)
			{
				if (*i < '0' or *i > '9')
				{
					result = -1;
					break;
				}

				result += (*i - '0') / dec;
				dec += 10; 
			}
		}
	}
	
	if (result < 1.0 or result >= 2.0)
		not_well_formed(boost::wformat(L"Invalid version specified: '%1%'") % m_token);
	
	return result;
}

void parser_imp::parse(bool validate)
{
	m_validating = validate;
	
	m_lookahead = get_next_token();
	
	prolog();
	
	doctype::validator valid;
	
	const doctype::element* e = get_element(m_root_element);
	
	if (m_has_dtd and e == nil and m_validating)
		not_valid(boost::wformat(L"Element '%1%' is not defined in DTD") % m_root_element);
	
	doctype::allowed_ptr allowed(new doctype::allowed_element(m_root_element));
	
	if (e != nil)
		valid = doctype::validator(allowed);
	
	element(valid);
	misc();
	
	if (m_lookahead != xml_Eof)
		not_well_formed(L"garbage at end of file");

	if (not m_unresolved_ids.empty())
	{
		not_valid(boost::wformat(L"document contains references to the following undefined ID's: '%1%'")
			% ba::join(m_unresolved_ids, L", "));
	}
}

void parser_imp::prolog()
{
	xml_decl();
	
	misc();

	if (m_lookahead == xml_DocType)
	{
		doctypedecl();
		misc();
	}
	else if (m_validating)
		not_valid(L"document type declaration is missing");
}

void parser_imp::xml_decl()
{
	if (m_lookahead == xml_XMLDecl)
	{
		match(xml_XMLDecl);
	
		s(true);
		if (m_token != L"version")
			not_well_formed(L"expected a version attribute in XML declaration");
		match(xml_Name);
		eq();
		m_version = parse_version();
		if (m_version >= 2.0 or m_version < 1.0)
			not_well_formed(L"This library only supports XML version 1.x");
		match(xml_String);

		if (m_lookahead == xml_Space)
		{
			s(true);
			
			if (m_token == L"encoding")
			{
				match(xml_Name);
				eq();
				ba::to_upper(m_token);
				if (m_token == L"UTF-8" or m_token == L"US-ASCII")	// ascii is a subset of utf-8
					m_encoding = enc_UTF8;
				else if (m_token == L"UTF-16")
				{
					if (m_encoding != enc_UTF16LE and m_encoding != enc_UTF16BE)
						not_well_formed(L"Inconsistent encoding attribute in XML declaration");
//						cerr << "Inconsistent encoding attribute in XML declaration" << endl;
					m_encoding = enc_UTF16BE;
				}
//				else if (m_token == L"ISO-8859-1")
//					m_encoding = enc_ISO88591;
				else
					not_well_formed(boost::wformat(L"Unsupported encoding value '%1%'") % m_token);
				match(xml_String);

				s();
			}
			
			if (m_token == L"standalone")
			{
				match(xml_Name);
				eq();
				if (m_token != L"yes" and m_token != L"no")
					not_well_formed(L"Invalid XML declaration, standalone value should be either yes or no");
				m_standalone = (m_token == L"yes");
				match(xml_String);
				s();
			}
		}
		
		match('?');
		match('>');
	}
}

void parser_imp::text_decl()
{
	if (m_lookahead == xml_XMLDecl)
	{
		match(xml_XMLDecl);
	
		s(true);
			
		if (m_token == L"version")
		{
			match(xml_Name);
			eq();
			m_version = parse_version();
			if (m_version >= 2.0 or m_version < 1.0)
				throw exception("This library only supports XML version 1.x");
			match(xml_String);
			s(true);
		}
		
		if (m_token != L"encoding")
			not_well_formed(L"encoding attribute is mandatory in text declaration");
		match(xml_Name);
		eq();
		match(xml_String);
		s();
		
		match('?');
		match('>');
	}
}

void parser_imp::misc()
{
	for (;;)
	{
		switch (m_lookahead)
		{
			case xml_Space:
				s();
				continue;
			
			case xml_Comment:
				comment();
				continue;
			
			case xml_PI:
				pi();
				continue;
		}
		
		break;
	}	
}

void parser_imp::doctypedecl()
{
	value_saver<bool> in_doctype(m_in_doctype, true);
	value_saver<bool> allow_parameter_entity_references(m_allow_parameter_entity_references, false);
	
	match(xml_DocType);
	
	m_has_dtd = true;

	s(true);
	
	wstring name = m_token;
	match(xml_Name);
	
	m_root_element = name;

	data_ptr dtd;

	if (m_lookahead == xml_Space)
	{
		s(true);
		
		if (m_lookahead == xml_Name)
		{
			dtd = external_id();
			match(xml_String);
		}
		
		s();
	}
	
	if (m_lookahead == '[')
	{
		match('[');
		intsubset();
		match(']');

		s();
	}

	// internal subset takes precedence over external subset, so
	// if the external subset is defined, include it here.
	if (dtd)
	{
		// save the parser state
		parser_state save(this, dtd);
		
		m_data_source = dtd;
		m_lookahead = get_next_token();
		m_in_external_dtd = true;
		
		text_decl();
		
		extsubset();

		if (m_lookahead != xml_Eof)
			not_well_formed(L"Error parsing external dtd");

		m_in_external_dtd = false;
	}

	match('>');
	
	// test if all ndata references can be resolved
	
	foreach (const doctype::entity& e, m_general_entities)
	{
		if (e.parsed() == false and m_notations.count(e.ndata()) == 0)
			not_valid(boost::wformat(L"Undefined NOTATION '%1%'") % e.ndata());
	}
	
	// and the notations in the doctype attlists
	foreach (const doctype::element& element, m_doctype)
	{
		foreach (const doctype::attribute& attr, element.attributes())
		{
			if (attr.get_type() != doctype::attTypeNotation)
				continue;
			
			foreach (const wstring& n, attr.get_enums())
			{
				if (m_notations.count(n) == 0)
					not_valid(boost::wformat(L"Undefined NOTATION '%1%'") % n);
			}
		}
	}
}

void parser_imp::pereference()
{
	const doctype::entity& e = get_parameter_entity(m_token);
	
	m_data_source.reset(new parameter_entity_data_source(e.replacement(), e.path(), m_data_source));
	
	match(xml_PEReference);
}

void parser_imp::intsubset()
{
	value_saver<bool> allow_parameter_entity_references(m_allow_parameter_entity_references, false);

	for (;;)
	{
		switch (m_lookahead)
		{
			case xml_Element:
			case xml_AttList:
			case xml_Entity:
			case xml_Notation:
				markup_decl();
				continue;

			case xml_PI:
				pi();
				continue;
			
			case xml_Comment:
				comment();
				continue;
			
			case xml_Space:
			case xml_PEReference:
				declsep();
				continue;
		}
		
		break;
	}
}

void parser_imp::declsep()
{
	switch (m_lookahead)
	{
		case xml_PEReference:
		{
			const doctype::entity& e = get_parameter_entity(m_token);
			
			{
				data_ptr source(new parameter_entity_data_source(e.replacement(), e.path()));
				parser_state state(this, source);
				
				m_lookahead = get_next_token();
				extsubset();
				if (m_lookahead != xml_Eof)
					not_well_formed(L"parameter entity replacement should match external subset production");
			}
			
			match(xml_PEReference);
			break;
		}
			
		case xml_Space:
			s();
			break;
	}
}

void parser_imp::extsubset()
{
	value_saver<bool> save(m_external_subset, true);
	value_saver<bool> allow_parameter_entity_references(m_allow_parameter_entity_references, false);

	for (;;)
	{
		switch (m_lookahead)
		{
			case xml_Element:
			case xml_AttList:
			case xml_Entity:
			case xml_Notation:
				markup_decl();
				continue;
			
			case xml_IncludeIgnore:
				conditionalsect();
				continue;
			
			case xml_PI:
				pi();
				continue;
			
			case xml_Comment:
				comment();
				continue;
			
			case xml_Space:
			case xml_PEReference:
				declsep();
				continue;
		}
		
		break;
	}
}

void parser_imp::conditionalsect()
{
	valid_nesting_validator check(m_data_source);
	match(xml_IncludeIgnore);
	
	s();
	
	bool include = false;
	
	if (m_lookahead == xml_PEReference)
	{
		pereference();
		s();
	}
	
	if (m_token == L"INCLUDE")
		include = true;
	else if (m_token == L"IGNORE")
		include = false;
	else if (m_lookahead == xml_Name)
		not_well_formed(boost::wformat(L"Unexpected literal '%1%'") % m_token);
	
	match(xml_Name);
	
	check.check();
	
	s();
		
	if (include)
	{
		match('[');
		extsubset();
		match(']');
		match (']');
		check.check();
		match ('>');
	}
	else
	{
		ignoresectcontents();
		check.check();
		m_lookahead = get_next_token();
	}
}

void parser_imp::ignoresectcontents()
{
	// yet another tricky routine, skip 
	
	int state = 0;
	bool done = false;
	
	while (not done)
	{
		wchar_t ch = get_next_char();
		if (ch == 0)
			not_well_formed(L"runaway IGNORE section");
		
		switch (state)
		{
			case 0:
				if (ch == ']')
					state = 1;
				else if (ch == '<')
					state = 10;
				break;
			
			case 1:
				if (ch == ']')
					state = 2;
				else
				{
					retract();
					state = 0;
				}
				break;
			
			case 2:
				if (ch == '>')
					done = true;
				else if (ch != ']')
				{
					retract();
					state = 0;
				}
				break;
			
			case 10:
				if (ch == '!')
					state = 11;
				else
				{
					retract();
					state = 0;
				}
				break;
			
			case 11:
				if (ch == '[')
				{
					ignoresectcontents();
					state = 0;
				}
				else
				{
					retract();
					state = 0;	
				}
				break;
		}
	}
}

void parser_imp::markup_decl()
{
	value_saver<bool> allow_parameter_entity_references(
		m_allow_parameter_entity_references, m_external_subset);
	
	switch (m_lookahead)
	{
		case xml_Element:
			element_decl();
			break;
		
		case xml_AttList:
			attlist_decl();
			break;
		
		case xml_Entity:
			entity_decl();
			break;

		case xml_Notation:
			notation_decl();
			break;
		
		case xml_PI:
			pi();
			break;

		case xml_Comment:
			comment();
			break;

		case xml_Space:
			s();
			break;
	}
}

void parser_imp::element_decl()
{
	valid_nesting_validator check(m_data_source);
	
	match(xml_Element);
	s(true);

	wstring name = m_token;

	doctype::element_list::iterator e = find_if(m_doctype.begin(), m_doctype.end(),
		boost::bind(&doctype::element::name, _1) == name);

	if (e == m_doctype.end())
		e = m_doctype.insert(m_doctype.end(), new doctype::element(name, true, m_in_external_dtd));
	else if (e->declared())
		not_valid(boost::wformat(L"duplicate element declaration for element '%1%'") % name);
	else
		e->external(m_in_external_dtd);

	match(xml_Name);
	s(true);
	
	contentspec(*e);
	s();
	
	m_allow_parameter_entity_references = true;

	check.check();
	match('>');
}

void parser_imp::contentspec(doctype::element& element)
{
	if (m_lookahead == xml_Name)
	{
		if (m_token == L"EMPTY")
			element.set_allowed(doctype::allowed_ptr(new doctype::allowed_empty));
		else if (m_token == L"ANY")
			element.set_allowed(doctype::allowed_ptr(new doctype::allowed_any));
		else
			not_well_formed(L"Invalid element content specification");
		match(xml_Name);
	}
	else
	{
		valid_nesting_validator check(m_data_source);
		match('(');
		
		doctype::allowed_ptr allowed;
		
		s();
		
		bool mixed = false;
		bool more = false;

		if (m_lookahead == '#')	// Mixed
		{
			mixed = true;
			
			match(m_lookahead);
			if (m_token != L"PCDATA")
				not_well_formed(L"Invalid element content specification, expected #PCDATA");
			match(xml_Name);
			
			s();
			
			set<wstring> seen;
			
			while (m_lookahead == '|')
			{
				more = true;
				
				match('|');
				s();
				
				if (seen.count(m_token) > 0)
					not_valid(L"no duplicates allowed in mixed content for element declaration");
				seen.insert(m_token);
								
				match(xml_Name);
				s();
			}

			list<doctype::allowed_ptr> children;
			foreach (const wstring& c, seen)
				children.push_back(doctype::allowed_ptr(new doctype::allowed_element(c)));
			allowed.reset(new doctype::allowed_choice(children, true));
		}
		else					// children
		{
			list<doctype::allowed_ptr> children;
			
			children.push_back(cp());
			s();
			if (m_lookahead == ',')
			{
				more = true;
				do
				{
					match(m_lookahead);
					s();
					children.push_back(cp());
					s();
				}
				while (m_lookahead == ',');

				allowed.reset(new doctype::allowed_seq(children));
			}
			else if (m_lookahead == '|')
			{
				more = true;
				do
				{
					match(m_lookahead);
					s();
					children.push_back(cp());
					s();
				}
				while (m_lookahead == '|');

				allowed.reset(new doctype::allowed_choice(children, false));
			}
			else
				allowed = children.front();
		}

		s();

		check.check();
		match(')');
		
		if (m_lookahead == '*')
		{
			allowed.reset(new doctype::allowed_repeated(allowed, '*'));
			match('*');
		}
		else if (more)
		{
			if (mixed)
			{
				allowed.reset(new doctype::allowed_repeated(allowed, '*'));
				match('*');
			}
			else if (m_lookahead == '+')
			{
				allowed.reset(new doctype::allowed_repeated(allowed, '+'));
				match('+');
			}
			else if (m_lookahead == '?')
			{
				allowed.reset(new doctype::allowed_repeated(allowed, '?'));
				match('?');
			}
		}
		
		element.set_allowed(allowed);
	}
}

doctype::allowed_ptr parser_imp::cp()
{
	doctype::allowed_ptr result;
	
	if (m_lookahead == '(')
	{
		valid_nesting_validator check(m_data_source);
		list<doctype::allowed_ptr> children;

		match('(');
		
		s();
		children.push_back(cp());
		s();
		if (m_lookahead == ',')
		{
			do
			{
				match(m_lookahead);
				s();
				children.push_back(cp());
				s();
			}
			while (m_lookahead == ',');

			result.reset(new doctype::allowed_seq(children));
		}
		else if (m_lookahead == '|')
		{
			do
			{
				match(m_lookahead);
				s();
				children.push_back(cp());
				s();
			}
			while (m_lookahead == '|');

			result.reset(new doctype::allowed_choice(children, false));
		}
		else
			result = children.front();

		s();
		check.check();
		match(')');
	}
	else
	{
		wstring name = m_token;
		match(xml_Name);
		
		result.reset(new doctype::allowed_element(name));
	}
	
	switch (m_lookahead)
	{
		case '*':	result.reset(new doctype::allowed_repeated(result, '*'));	match('*'); break;
		case '+':	result.reset(new doctype::allowed_repeated(result, '+'));	match('+'); break;
		case '?':	result.reset(new doctype::allowed_repeated(result, '?'));	match('?'); break;
	}
	
	return result;
}

void parser_imp::entity_decl()
{
	value_saver<bool> allow_parameter_entity_references(m_allow_parameter_entity_references, true);

	match(xml_Entity);
	s(true);

	if (m_lookahead == '%')	// PEDecl
		parameter_entity_decl();
	else
		general_entity_decl();
}

void parser_imp::parameter_entity_decl()
{
	match('%');
	s(true);
	
	wstring name = m_token;
	match(xml_Name);
	
	s(true);

	fs::path path;
	wstring value;

	m_allow_parameter_entity_references = false;
	
	// PEDef is either a EntityValue...
	if (m_lookahead == xml_String)
	{
		value = m_token;
		match(xml_String);
		parse_parameter_entity_declaration(value);
	}
	else	// ... or an external id 
	{
		boost::tie(path, value) = read_external_id();
		match(xml_String);
	}

	s();
	
	m_allow_parameter_entity_references = true;
	match('>');
	
	if (find_if(m_parameter_entities.begin(), m_parameter_entities.end(),
		boost::bind(&doctype::entity::name, _1) == name) == m_parameter_entities.end())
	{
		m_parameter_entities.push_back(new doctype::parameter_entity(name, value, path));
	}
}

void parser_imp::general_entity_decl()
{
	wstring name = m_token;
	match(xml_Name);
	s(true);
	
	fs::path path; // not used
	wstring value, ndata;
	bool external = false;
	bool parsed = true;

	if (m_lookahead == xml_String)
	{
		value = m_token;
		match(xml_String);
	
		parse_general_entity_declaration(value);
	}
	else // ... or an ExternalID
	{
		boost::tie(path, value) = read_external_id();
		match(xml_String);
		external = true;

		if (m_lookahead == xml_Space)
		{
			s(true);
			if (m_lookahead == xml_Name and m_token == L"NDATA")
			{
				match(xml_Name);
				s(true);
				
				parsed = false;
				ndata = m_token;

				match(xml_Name);
			}
		}
	}	
	
	s();
	
	m_allow_parameter_entity_references = true;
	match('>');
	
	if (find_if(m_general_entities.begin(), m_general_entities.end(),
		boost::bind(&doctype::entity::name, _1) == name) == m_general_entities.end())
	{
		m_general_entities.push_back(new doctype::general_entity(name, value, external, parsed));
		
		if (not parsed)
			m_general_entities.back().ndata(ndata);
		
		if (m_in_external_dtd)
			m_general_entities.back().externally_defined(true);
	}
}

void parser_imp::attlist_decl()
{
	match(xml_AttList);
	s(true);
	wstring element = m_token;
	match(xml_Name);
	
	doctype::element_list::iterator dte = find_if(m_doctype.begin(), m_doctype.end(), boost::bind(&doctype::element::name, _1) == element);
	
	if (dte == m_doctype.end())
		dte = m_doctype.insert(m_doctype.end(), new doctype::element(element, false, m_in_external_dtd));
	
	// attdef
	
	while (m_lookahead == xml_Space)
	{
		s(true);
		
		if (m_lookahead != xml_Name)
			break;
	
		wstring name = m_token;
		match(xml_Name);
		s(true);
		
		auto_ptr<doctype::attribute> attribute;
		
		// att type: several possibilities:
		if (m_lookahead == '(')	// enumeration
		{
			vector<wstring> enums;
			
			match(m_lookahead);
			
			s();
			
			enums.push_back(m_token);
			if (m_lookahead == xml_Name)
				match(xml_Name);
			else
				match(xml_NMToken);

			s();
			
			while (m_lookahead == '|')
			{
				match('|');

				s();

				enums.push_back(m_token);
				if (m_lookahead == xml_Name)
					match(xml_Name);
				else
					match(xml_NMToken);

				s();
			}

			s();
			
			match(')');
			
			attribute.reset(new doctype::attribute(name, doctype::attTypeEnumerated, enums));
		}
		else
		{
			wstring type = m_token;
			match(xml_Name);
			
			vector<wstring> notations;
			
			if (type == L"CDATA")
				attribute.reset(new doctype::attribute(name, doctype::attTypeString));
			else if (type == L"ID")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedID));
			else if (type == L"IDREF")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedIDREF));
			else if (type == L"IDREFS")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedIDREFS));
			else if (type == L"ENTITY")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedENTITY));
			else if (type == L"ENTITIES")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedENTITIES));
			else if (type == L"NMTOKEN")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedNMTOKEN));
			else if (type == L"NMTOKENS")
				attribute.reset(new doctype::attribute(name, doctype::attTypeTokenizedNMTOKENS));
			else if (type == L"NOTATION")
			{
				s(true);
				match('(');
				s();
				
				notations.push_back(m_token);
				match(xml_Name);
				
				s();

				while (m_lookahead == '|')
				{
					match('|');
	
					s();
	
					notations.push_back(m_token);
					match(xml_Name);
	
					s();
				}
	
				s();
				
				match(')');
				
				attribute.reset(new doctype::attribute(name, doctype::attTypeNotation, notations));
			}
			else
				not_well_formed(L"invalid attribute type");
		}
		
		// att def

		s(true);
		
		wstring value;
		
		if (m_lookahead == '#')
		{
			match(m_lookahead);
			wstring def = m_token;
			match(xml_Name);

			if (def == L"REQUIRED")
				attribute->set_default(doctype::attDefRequired, L"");
			else if (def == L"IMPLIED")
				attribute->set_default(doctype::attDefImplied, L"");
			else if (def == L"FIXED")
			{
				if (attribute->get_type() == doctype::attTypeTokenizedID)
					not_valid(L"the default declaration for an ID attribute declaration should be #IMPLIED or #REQUIRED");
				
				s(true);

				wstring value = m_token;
				normalize_attribute_value(value);
				if (not value.empty() and not attribute->validate_value(value, m_general_entities))
				{
					not_valid(boost::wformat(L"default value '%1%' for attribute '%2%' is not valid")
						% value % name);
				}
				
				attribute->set_default(doctype::attDefFixed, value);
				match(xml_String);
			}
			else
				not_well_formed(L"invalid attribute default");
		}
		else
		{
			if (attribute->get_type() == doctype::attTypeTokenizedID)
				not_valid(L"the default declaration for an ID attribute declaration should be #IMPLIED or #REQUIRED");

			wstring value = m_token;
			normalize_attribute_value(value);
			if (not value.empty() and not attribute->validate_value(value, m_general_entities))
			{
				not_valid(boost::wformat(L"default value '%1%' for attribute '%2%' is not valid")
					% value % name);
			}
			attribute->set_default(doctype::attDefNone, value);
			match(xml_String);
		}
		
		if (attribute->get_type() == doctype::attTypeTokenizedID)
		{
			const doctype::attribute_list& atts = dte->attributes();
			if (find_if(atts.begin(), atts.end(), boost::bind(&doctype::attribute::get_type, _1) == doctype::attTypeTokenizedID) != atts.end())
				not_valid(L"only one attribute per element can have the ID type");
		}

		attribute->external(m_in_external_dtd);		
		dte->add_attribute(attribute);
	}

	m_allow_parameter_entity_references = true;
	match('>');
}

void parser_imp::notation_decl()
{
	match(xml_Notation);
	s(true);
	
	wstring name = m_token, pubid, sysid;
	
	if (m_notations.count(name) > 0)
		not_valid(L"notation names should be unique");
	m_notations.insert(name);
	
	match(xml_Name);
	s(true);

	if (m_token == L"SYSTEM")
	{
		match(xml_Name);
		s(true);
		
		sysid = m_token;
		match(xml_String);

		if (not is_valid_system_literal(sysid))
			not_well_formed(L"invalid system literal");
	}
	else if (m_token == L"PUBLIC")
	{
		match(xml_Name);
		s(true);
		
		pubid = m_token;
		match(xml_String);
		
		// validate the public ID
		if (not is_valid_public_id(pubid))
			not_well_formed(L"Invalid public ID");
		
		s();
		
		if (m_lookahead == xml_String)
		{
			sysid = m_token;
			match(xml_String);
		}
	}
	else
		not_well_formed(L"Expected either SYSTEM or PUBLIC");

	s();

	m_allow_parameter_entity_references = true;
	match('>');
	
	m_parser.notation_decl(name, sysid, pubid);
}

data_ptr parser_imp::external_id()
{
	data_ptr result;
	wstring pubid, system;
	
	if (m_token == L"SYSTEM")
	{
		match(xml_Name);
		s(true);
		
		system = m_token;

		if (not is_valid_system_literal(system))
			not_well_formed(L"invalid system literal");
	}
	else if (m_token == L"PUBLIC")
	{
		match(xml_Name);
		s(true);
		
		pubid = m_token;
		match(xml_String);

		// validate the public ID
		if (not is_valid_public_id(pubid))
			not_well_formed(L"Invalid public ID");
		
		s(true);
		system = m_token;
	}
	else
		not_well_formed(L"Expected external id starting with either SYSTEM or PUBLIC");

	if (not system.empty())
	{
		auto_ptr<istream> is;
		fs::path path;
		
		// first allow the client to retrieve the dtd
		is.reset(m_parser.find_external_dtd(pubid, system));
		
		// if that fails, we try it ourselves
		if (is.get() == nil)
		{
			path = fs::system_complete(m_data_source->base_dir() / wstring_to_string(system));
	
			if (fs::exists(path))
				is.reset(new fs::ifstream(path));
		}
		
		if (is.get() != nil)
		{
			result.reset(new istream_data_source(is));
			
			if (fs::exists(path) and fs::exists(path.branch_path()))
				result->base_dir(path.branch_path());
		}
	}

	return result;
}

boost::tuple<fs::path,wstring> parser_imp::read_external_id()
{
	wstring result;
	fs::path path;

	parser_state save(this, external_id());
	
	if (m_data_source)
	{
		path = m_data_source->base_dir();
		
		m_lookahead = get_next_token();

		text_decl();
		
		result = m_token;
	
		while (wchar_t ch = get_next_char())
			result += ch;
	}
	
	return boost::make_tuple(path, result);
}

void parser_imp::parse_parameter_entity_declaration(wstring& s)
{
	wstring result;
	
	int state = 0;
	wchar_t charref = 0;
	wstring name;
	
	for (wstring::const_iterator i = s.begin(); i != s.end(); ++i)
	{
		wchar_t c = *i;
		
		switch (state)
		{
			case 0:
				if (c == '&')
					state = 1;
				else if (c == '%')
				{
					if (m_external_subset)
					{
						name.clear();
						state = 20;
					}
					else
						not_well_formed(L"parameter entities may not occur in declarations that are not in an external subset");
				}
				else
					result += c;
				break;
			
			case 1:
				if (c == '#')
					state = 2;
				else
				{
					result += '&';
					result += c;
					state = 0;
				}
				break;

			case 2:
				if (c == 'x')
					state = 4;
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = 3;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 3:
				if (c >= '0' and c <= '9')
					charref = charref * 10 + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));

					result += charref;
					state = 0;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 4:
				if (c >= 'a' and c <= 'f')
				{
					charref = c - 'a' + 10;
					state = 5;
				}
				else if (c >= 'A' and c <= 'F')
				{
					charref = c - 'A' + 10;
					state = 5;
				}
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = 5;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 5:
				if (c >= 'a' and c <= 'f')
					charref = (charref << 4) + (c - 'a' + 10);
				else if (c >= 'A' and c <= 'F')
					charref = (charref << 4) + (c - 'A' + 10);
				else if (c >= '0' and c <= '9')
					charref = (charref << 4) + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));
					
					result += charref;
					state = 0;
				}
				else
					not_well_formed(L"invalid character reference");
				break;

			case 20:
				if (c == ';')
				{
					const doctype::entity& e = get_parameter_entity(name);
					result += e.replacement();
					state = 0;
				}
				else if (is_name_char(c))
					name += c;
				else
					not_well_formed(L"invalid parameter entity reference");
				break;
			
			default:
				assert(false);
				not_well_formed(L"invalid state");
		}
	}
	
	if (state != 0)
		not_well_formed(L"invalid reference");
	
	swap(s, result);
}

// parse out the general and parameter entity references in a value string
// for a general entity reference which is about to be stored.
void parser_imp::parse_general_entity_declaration(wstring& s)
{
	wstring result;
	
	int state = 0;
	wchar_t charref = 0;
	wstring name;
	
	for (wstring::const_iterator i = s.begin(); i != s.end(); ++i)
	{
		wchar_t c = *i;
		
		switch (state)
		{
			case 0:
				if (c == '&')
					state = 1;
				else if (c == '%')
				{
					if (m_external_subset)
					{
						name.clear();
						state = 20;
					}
					else
						not_well_formed(L"parameter entities may not occur in declarations that are not in an external subset");
				}
				else
					result += c;
				break;
			
			case 1:
				if (c == '#')
					state = 2;
				else if (is_name_start_char(c))
				{
					name.assign(&c, 1);
					state = 10;
				}
				break;

			case 2:
				if (c == 'x')
					state = 4;
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = 3;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 3:
				if (c >= '0' and c <= '9')
					charref = charref * 10 + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));

					result += charref;
					state = 0;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 4:
				if (c >= 'a' and c <= 'f')
				{
					charref = c - 'a' + 10;
					state = 5;
				}
				else if (c >= 'A' and c <= 'F')
				{
					charref = c - 'A' + 10;
					state = 5;
				}
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = 5;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case 5:
				if (c >= 'a' and c <= 'f')
					charref = (charref << 4) + (c - 'a' + 10);
				else if (c >= 'A' and c <= 'F')
					charref = (charref << 4) + (c - 'A' + 10);
				else if (c >= '0' and c <= '9')
					charref = (charref << 4) + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));

					result += charref;
					state = 0;
				}
				else
					not_well_formed(L"invalid character reference");
				break;

			case 10:
				if (c == ';')
				{
					result += '&';
					result += name;
					result += ';';

					state = 0;
				}
				else if (is_name_char(c))
					name += c;
				else
					not_well_formed(L"invalid entity reference");
				break;

			case 20:
				if (c == ';')
				{
					const doctype::entity& e = get_parameter_entity(name);
					result += e.replacement();
					state = 0;
				}
				else if (is_name_char(c))
					name += c;
				else
					not_well_formed(L"invalid parameter entity reference");
				break;
			
			default:
				assert(false);
				not_well_formed(L"invalid state");
		}
	}
	
	if (state != 0)
		not_well_formed(L"invalid reference");
	
	swap(s, result);
}

wstring parser_imp::normalize_attribute_value(data_ptr data)
{
	wstring result;
	
	wchar_t charref = 0;
	wstring name;
	
	enum State {
		state_Start,
		state_ReferenceStart,
		state_CharReferenceStart,
		state_HexCharReference,
		state_HexCharReference2,
		state_DecCharReference,
		state_EntityReference,
		
	} state = state_Start;
	
	for (;;)
	{
		wchar_t c = data->get_next_char();
		
		if (c == 0)
			break;
		
		if (c == '<')
			not_well_formed(L"Attribute values may not contain '<' character");
		
		switch (state)
		{
			case state_Start:
				if (c == '&')
					state = state_ReferenceStart;
				else if (c == ' ' or c == '\n' or c == '\t' or c == '\r')
					result += ' ';
				else
					result += c;
				break;
			
			case state_ReferenceStart:
				if (c == '#')
					state = state_CharReferenceStart;
				else if (is_name_start_char(c))
				{
					name.assign(&c, 1);
					state = state_EntityReference;
				}
				else
					not_well_formed(L"invalid reference found in attribute value");
				break;

			case state_CharReferenceStart:
				if (c == 'x')
					state = state_HexCharReference;
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = state_DecCharReference;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_DecCharReference:
				if (c >= '0' and c <= '9')
					charref = charref * 10 + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));

					result += charref;
					state = state_Start;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_HexCharReference:
				if (c >= 'a' and c <= 'f')
				{
					charref = c - 'a' + 10;
					state = state_HexCharReference2;
				}
				else if (c >= 'A' and c <= 'F')
				{
					charref = c - 'A' + 10;
					state = state_HexCharReference2;
				}
				else if (c >= '0' and c <= '9')
				{
					charref = c - '0';
					state = state_HexCharReference2;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_HexCharReference2:
				if (c >= 'a' and c <= 'f')
					charref = (charref << 4) + (c - 'a' + 10);
				else if (c >= 'A' and c <= 'F')
					charref = (charref << 4) + (c - 'A' + 10);
				else if (c >= '0' and c <= '9')
					charref = (charref << 4) + (c - '0');
				else if (c == ';')
				{
					if (not is_char(charref))
						not_well_formed(boost::wformat(L"Illegal character referenced: 0x%x") % int(charref));

					result += charref;
					state = state_Start;
				}
				else
					not_well_formed(L"invalid character reference");
				break;
			
			case state_EntityReference:
				if (c == ';')
				{
					if (data->is_entity_on_stack(name))
						not_well_formed(L"infinite recursion in nested entity references");
					
					const doctype::entity& e = get_general_entity(name);
					
					if (e.external())
						not_well_formed(L"attribute value may not contain external entity reference");
					
					if (e.externally_defined() and m_standalone)
						not_well_formed(L"document marked as standalone but an external entity is referenced");
					
					data_ptr next_data(new entity_data_source(name, m_data_source->base_dir(), e.replacement(), data));
					wstring replacement = normalize_attribute_value(next_data);
					result += replacement;

					state = state_Start;
				}
				else if (is_name_char(c))
					name += c;
				else
					not_well_formed(L"invalid entity reference");
				break;

			default:
				assert(false);
				not_well_formed(L"invalid state");
		}
	}
	
	if (state != state_Start)
		not_well_formed(L"invalid reference");
	
	return result;
}

void parser_imp::element(doctype::validator& valid)
{
	value_saver<bool> in_element(m_in_element, true);
	value_saver<bool> in_content(m_in_content, false);

	match(xml_STag);
	wstring name = m_token;
	match(xml_Name);
	
	if (not valid(name))
		not_valid(boost::wformat(L"element '%1%' not expected at this position") % name);

	const doctype::element* dte = get_element(name);

	if (m_has_dtd and dte == nil and m_validating)
		not_valid(boost::wformat(L"Element '%1%' is not defined in DTD") % name);

	doctype::validator sub_valid;
	if (dte != nil)
		sub_valid = dte->get_validator();

	list<detail::wattr> attrs;
	
	ns_state ns(this);
	set<wstring> seen;
	
	for (;;)
	{
		if (m_lookahead != xml_Space)
			break;
		
		s(true);
		
		if (m_lookahead != xml_Name)
			break;
		
		wstring attr_name = m_token;
		match(xml_Name);
		
		if (seen.count(attr_name) > 0)
			not_well_formed(boost::wformat(L"multiple values for attribute '%1%'") % attr_name);
		seen.insert(attr_name);
		
		eq();

		wstring attr_value = normalize_attribute_value(m_token);
		match(xml_String);

		const doctype::attribute* dta = nil;
		if (dte != nil)
			dta = dte->get_attribute(attr_name);

		if (dta == nil and m_validating)
			not_valid(boost::wformat(L"undeclared attribute '%1%'") % attr_name);

		if (m_validating and
			dta != nil and
			dta->get_default_type() == doctype::attDefFixed and
			attr_value != boost::get<1>(dta->get_default()))
		{
			not_valid(L"invalid value specified for fixed attribute");
		}
		
		if (attr_name == L"xmlns" or ba::starts_with(attr_name, L"xmlns:"))	// namespace support
		{
			if (attr_name.length() == 5)
			{
				ns.m_default_ns = attr_value;
				m_parser.start_namespace_decl(L"", attr_value);
			}
			else
			{
				wstring prefix = attr_name.substr(6);
				ns.m_known[prefix] = attr_value;
				m_parser.start_namespace_decl(prefix, attr_value);
			}
		}
		else
		{
			bool id = (attr_name == L"xml:id");
			
			if (dta != nil)
			{
				wstring v(attr_value);
				
				if (not dta->validate_value(attr_value, m_general_entities))
				{
					not_valid(boost::wformat(L"invalid value ('%2%') for attribute %1%")
						% attr_name % attr_value);
				}
				
				if (m_validating and m_standalone and dta->external() and v != attr_value)
					not_valid(L"attribute value modified as a result of an external defined attlist declaration, which is not valid in a standalone document");
				
				if (dta->get_type() == doctype::attTypeTokenizedID)
				{
					id = true;
					
					if (m_ids.count(attr_value) > 0)
					{
						not_valid(boost::wformat(L"attribute value ('%1%') for attribute '%2%' is not unique")
							% attr_value % attr_name);
					}
					
					m_ids.insert(attr_value);
					
					if (m_unresolved_ids.count(attr_value) > 0)
						m_unresolved_ids.erase(attr_value);
				}
				else if (dta->get_type() == doctype::attTypeTokenizedIDREF or dta->get_type() == doctype::attTypeTokenizedIDREFS)
				{
					list<wstring> ids;
					ba::split(ids, attr_value, ba::is_any_of(L" "));
					foreach (const wstring& id, ids)
					{
						if (m_ids.count(id) == 0)
							m_unresolved_ids.insert(id);
					}
				}
			}
			
			detail::wattr attr;
			attr.m_name = attr_name;
			attr.m_value = attr_value;
			attr.m_id = id;
			
			if (m_ns != nil)
			{
				wstring::size_type d = attr_name.find(':');
				if (d != wstring::npos)
				{
					wstring ns = m_ns->ns_for_prefix(attr_name.substr(0, d));
					
					if (not ns.empty())
					{
						attr.m_ns = ns;
						attr.m_name = attr_name.substr(d + 1);
					}
				}
			}
			
			attrs.push_back(attr);
		}
	}
	
	// add missing attributes
	if (dte != nil)
	{
		foreach (const doctype::attribute& dta, dte->attributes())
		{
			wstring attr_name = dta.name();
			
			list<detail::wattr>::iterator attr = find_if(attrs.begin(), attrs.end(),
				boost::bind(&detail::wattr::m_name, _1) == attr_name);
			
			doctype::AttributeDefault defType;
			wstring defValue;
			
			boost::tie(defType, defValue) = dta.get_default();
			
			if (defType == doctype::attDefRequired)
			{
				if (attr == attrs.end())
					not_valid(boost::wformat(L"missing #REQUIRED attribute '%1%' for element '%2%'")
						% attr_name % name);
			}
			else if (not defValue.empty() and attr == attrs.end())
			{
				if (m_validating and m_standalone and dta.external())
					not_valid(L"default value for attribute defined in external declaration which is not allowed in a standalone document");

				detail::wattr attr;
				attr.m_name = attr_name;
				attr.m_value = normalize_attribute_value(defValue);
				attr.m_id = false;
				
				if (m_ns != nil)
				{
					wstring::size_type d = attr_name.find(':');
					if (d != wstring::npos)
					{
						wstring ns = m_ns->ns_for_prefix(attr_name.substr(0, d));
						
						if (not ns.empty())
						{
							attr.m_ns = ns;
							attr.m_name = attr_name.substr(d + 1);
						}
					}
				}
				
				attrs.push_back(attr);
			}
		}
	}
	
	// now find out the namespace we're supposed to pass
	wstring uri, raw(name);
	list<wstring> qname;
	ba::split(qname, name, ba::is_any_of(L":"));
	if (qname.size() == 2 and not qname.front().empty())
	{
		uri = ns.ns_for_prefix(qname.front());
		name = qname.back();
	}
	else
		uri = ns.default_ns();

	// sort the attributes
	attrs.sort(boost::bind(&detail::wattr::m_name, _1) < boost::bind(&detail::wattr::m_name, _2));

	if (m_lookahead == '/')
	{
		match('/');
		m_parser.start_element(name, uri, attrs);
		m_parser.end_element(name, uri);
	}
	else
	{
		m_parser.start_element(name, uri, attrs);
		
		// open scope, we're entering a content production
		{
			value_saver<bool> save(m_in_content, true);
			match('>');

			if (m_lookahead != xml_ETag)
				content(sub_valid, m_validating and m_standalone and dte->external() and dte->element_content());
		}
		
		match(xml_ETag);
		
		if (m_token != raw)
			not_well_formed(L"end tag does not match start tag");
		
		match(xml_Name);

		s();
		
		m_parser.end_element(name, uri);
	}
	
	m_in_content = in_content.m_value;
	match('>');
	
	if (m_validating and dte != nil and not sub_valid.done())
		not_valid(boost::wformat(L"missing child elements for element '%1%'") % dte->name());
	
	s();
}

void parser_imp::content(doctype::validator& valid, bool check_for_whitespace)
{
	do
	{
		switch (m_lookahead)
		{
			case xml_Content:
				if (valid.allow_char_data())
					m_parser.character_data(m_token);
				else
				{
					ba::trim(m_token);
					if (m_token.empty())
					{
						if (check_for_whitespace)
							not_valid(L"element declared in external subset contains white space");
					}
					else
						not_valid(boost::wformat(L"character data '%1%' not allowed in element") % m_token);
				}
				match(xml_Content);
				break;
			
			case xml_Reference:
			{
				const doctype::entity& e = get_general_entity(m_token);
				
				if (m_data_source->is_entity_on_stack(m_token))
					not_well_formed(L"infinite recursion of entity references");
				
				if (e.externally_defined() and m_standalone)
					not_well_formed(L"document marked as standalone but an external entity is referenced");
				
				if (not e.parsed())
					not_well_formed(L"content has a general entity reference to an unparsed entity");
				
				// scope
				{
					data_ptr source(new entity_data_source(m_token, m_data_source->base_dir(), e.replacement(), m_data_source));
				
					parser_state state(this, source);
					
					m_lookahead = get_next_content();
					m_in_external_dtd = e.externally_defined();
					
					if (m_lookahead != xml_Eof)
						content(valid, check_for_whitespace);

					if (m_lookahead != xml_Eof)
						not_well_formed(L"entity reference should be a valid content production");
				}
				
				match(xml_Reference);
				break;
			}
			
			case xml_STag:
				element(valid);
				break;
			
			case xml_PI:
				pi();
				break;
			
			case xml_Comment:
				comment();
				break;
			
			case xml_Space:
				s();
				break;
			
			case xml_CDSect:
				if (not valid.allow_char_data())
					not_valid(boost::wformat(L"character data '%1%' not allowed in element") % m_token);

				m_parser.start_cdata_section();
				m_parser.character_data(m_token);
				m_parser.end_cdata_section();
				
				match(xml_CDSect);
				break;

			default:
				match(xml_Content);	// will fail and report error
		}
	}
	while (m_lookahead != xml_ETag and m_lookahead != xml_Eof);
}

void parser_imp::comment()
{
	// m_lookahead == xml_Comment
	// read characters until we reach -->
	// check all characters in between for validity
	
	enum {
		state_Start,
		state_FirstHyphenSeen,
		state_SecondHyphenSeen,
		state_CommentClosed
	} state = state_Start;

	m_token.clear();

	while (state != state_CommentClosed)
	{
		wchar_t ch = get_next_char();
		
		if (ch == 0)
			not_well_formed(L"runaway comment");
		if (not is_char(ch))
			not_well_formed(boost::wformat(L"illegal character in content: '0x%x'") % int(ch));
		
		switch (state)
		{
			case state_Start:
				if (ch == '-')
					state = state_FirstHyphenSeen;
				break;
			
			case state_FirstHyphenSeen:
				if (ch == '-')
					state = state_SecondHyphenSeen;
				else
					state = state_Start;
				break;
			
			case state_SecondHyphenSeen:
				if (ch == '>')
					state = state_CommentClosed;
				else
					not_well_formed(L"double hyphen found in comment");
				break;
			
			case state_CommentClosed:
				assert(false);
		}
	}
	
	assert(m_token.length() >= 3);
	m_token.erase(m_token.end() - 3, m_token.end());
	m_parser.comment(m_token);
	
	match(xml_Comment);
}

void parser_imp::pi()
{
	// m_lookahead == xml_PI
	// read characters until we reach -->
	// check all characters in between for validity
	
	wstring pi_target = m_token.substr(2);
	
	if (pi_target.empty())
		not_well_formed(L"processing instruction target missing");

	// we treat the xml processing instruction separately.
	if (m_token.substr(2) == L"xml")
		not_well_formed(L"xml declaration are only valid as the start of the file");
	else if (ba::to_lower_copy(pi_target) == L"xml")
		not_well_formed(L"<?XML is neither an XML declaration nor a legal processing instruction target");
	
	enum {
		state_Start,
		state_DataStart,
		state_Data,
		state_QuestionMarkSeen,
		state_PIClosed
	} state = state_Start;

	m_token.clear();

	while (state != state_PIClosed)
	{
		wchar_t ch = get_next_char();
		
		if (ch == 0)
			not_well_formed(L"runaway processing instruction");
		if (not is_char(ch))
			not_well_formed(boost::wformat(L"illegal character in processing instruction: '0x%x'") % int(ch));
		
		switch (state)
		{
			case state_Start:
				if (ch == '?')
					state = state_QuestionMarkSeen;
				else if (ch == ' ' or ch == '\n' or ch == '\t')
				{
					m_token.clear();
					state = state_DataStart;
				}
				else
					not_well_formed(L"a space is required before pi data");
				break;
			
			case state_DataStart:
				if (ch == ' ' or ch == '\n' or ch == '\t')
					m_token.clear();
				else if (ch == '?')
					state = state_QuestionMarkSeen;
				else
					state = state_Data;
				break;
			
			case state_Data:
				if (ch == '?')
					state = state_QuestionMarkSeen;
				break;
			
			case state_QuestionMarkSeen:
				if (ch == '>')
					state = state_PIClosed;
				else if (ch != '?')
					state = state_Data;
				break;
			
			case state_PIClosed:
				assert(false);
		}
	}
	
	m_token.erase(m_token.end() - 2, m_token.end());
	m_parser.processing_instruction(pi_target, m_token);
	
	match(xml_PI);
}

// --------------------------------------------------------------------

basic_parser_base::~basic_parser_base()
{
	delete m_impl;
	delete m_istream;
}

string basic_parser_base::wstring_to_string(const wstring& s)
{
	return m_impl->wstring_to_string(s);
}

template<>
basic_parser<char>::basic_parser(istream& data)
	: basic_parser_base(new parser_imp(data, *this), nil)
	, m_traits(*this)
{
}

template<>
basic_parser<char>::basic_parser(const string& data)
	: basic_parser_base(nil, nil)
	, m_traits(*this)
{
	m_istream = new istringstream(data);
	m_impl = new parser_imp(*m_istream, *this);
}

template<>
basic_parser<char>::~basic_parser()
{
}

template<>
void basic_parser<char>::parse(bool validate)
{
	m_impl->parse(validate);
}

}
}
