# Makefile for example app using libzeep
#
# Copyright Maarten L. Hekkelman, UMC St. Radboud 2008-2013.
#        Copyright Maarten L. Hekkelman, 2014-2019
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#
# Use the make.config file in the uplevel directory to
# change the settings for this build

SHELL := /bin/bash

firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @CPPFLAGS@ @BOOST_CPPFLAGS@ @PTHREAD_CFLAGS@ @PQXX_CFLAGS@ @ZEEP_CFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@ @PTHREAD_CFLAGS@ @PQXX_LIBS@
LIBS				= @BOOST_PROGRAM_OPTIONS_LIB@ @ZEEP_LIBS@ @LIBS@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
includedir			= @includedir@

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

# main build variables
CXXFLAGS            += -Wall -Wno-multichar

# Use the DEBUG flag to build debug versions of the code
DEBUG               = @DEBUG@

DEFINES				+= APP_NAME='"@PACKAGE_NAME@"'
DEFINES				+= WEBAPP_USES_RESOURCES

ifeq "$(DEBUG)" "1"
DEFINES				+= DEBUG
CXXFLAGS            += -g -O0
LDFLAGS				+= -g
else
CXXFLAGS			+= -O2
DEFINES				+= NDEBUG
endif

# targets

VPATH += src:test

CXXFLAGS			+= $(DEFINES:%=-D%)

OBJDIR = obj
ifeq "$(DEBUG)" "1"
	OBJDIR	:= $(OBJDIR).dbg
endif

$(OBJDIR):
	mkdir -p $(OBJDIR)

MRC					= @MRC@

APPLICATION = @PACKAGE_NAME@

OBJECTS = $(APPLICATION:%=$(OBJDIR)/%.o) \
	$(APPLICATION:%=$(OBJDIR)/%_rsrc.o)
	
-include $(OBJECTS:%.o=%.d)

$(OBJECTS:.o=.d):

$(OBJDIR)/%.o: %.cpp | src/mrsrc.h $(OBJDIR)
	@ echo ">>" $<
	@ $(CXX) -MD -c -o $@ $< $(CFLAGS) $(CXXFLAGS)

all: $(APPLICATION)
.PHONY: all

REVISION = $(shell git log --pretty=format:%h --max-count=1)
REVISION_FILE = version-info-$(REVISION).txt

$(REVISION_FILE):
	rm -f version-info-*.txt
	git log --pretty=fuller -1 > $@

rsrc/version.txt: $(REVISION_FILE) | rsrc
	cp $? $@

rsrc:
	mkdir -p $@

RSRC = rsrc/version.txt docroot/ 

# yarn rules
SCRIPTS = $(shell find webapp -name '*.js')
WEBAPP_FILES = $(SCRIPTS)
SCRIPT_FILES = $(SCRIPTS:webapp/%.js=docroot/scripts/%.js)

ifneq ($(DEBUG),1)
WEBPACK_OPTIONS = --env.PRODUCTIE
endif

$(subst .js,%js,$(SCRIPT_FILES)): $(subst .js,%js,$(WEBAPP_FILES))
	yarn webpack $(WEBPACK_OPTIONS)

$(OBJDIR)/$(APPLICATION)_rsrc.o: $(RSRC) $(SCRIPT_FILES)
	$(MRC) -o $@ $(RSRC) --verbose

$(APPLICATION): %: $(OBJECTS)
	@ echo '->' $@
	@ $(CXX) -o $@ $^ $(LDFLAGS) $(LIBS)

.PHONY: clean
clean:
	rm -rf $(OBJDIR)/* $(APPLICATION)

.PHONY: distclean
distclean: clean
	rm -f config.status config.cache config.log configure.lineno config.status.lineno
	rm -f GNUmakefile

.PHONY: FORCE
FORCE:

.PHONY: help
help:
	echo $(REVISION)